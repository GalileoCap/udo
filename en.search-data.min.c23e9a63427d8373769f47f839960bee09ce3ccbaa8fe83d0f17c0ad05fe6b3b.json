[{"id":0,"href":"/udo/examples/basic/","title":"Basic Example","section":"Examples","content":" Basic Example # FPATH = \u0026#39;/tmp/test.touch\u0026#39; def TaskTouch(): return { \u0026#39;description\u0026#39;: \u0026#39;Creates the file\u0026#39;, \u0026#39;outs\u0026#39;: [FPATH], # This task creates these files \u0026#39;actions\u0026#39;: [ f\u0026#39;echo \u0026#34;Ahoy there!\u0026#34; \u0026gt; {FPATH}\u0026#39;, ], } def TaskMessage(): return { \u0026#39;description\u0026#39;: \u0026#39;Prints the file\u0026#39;, \u0026#39;deps\u0026#39;: [FPATH], # This task depends on these files \u0026#39;capture\u0026#39;: 1, # Show stdout \u0026#39;actions\u0026#39;: [ f\u0026#39;cat {FPATH}\u0026#39;, ], } "},{"id":1,"href":"/udo/quick-start/","title":"Quick Start","section":"Introduction","content":" Quick Start # Install # Download binary from the releases.\nCreate a basic task # In udo.py\nUDOConfig = { \u0026#39;version\u0026#39;: \u0026#39;1.3.0\u0026#39;, } FPATH = \u0026#39;/tmp/test.touch\u0026#39; def TaskTouch(): return { \u0026#39;description\u0026#39;: \u0026#39;Creates the file\u0026#39;, \u0026#39;outs\u0026#39;: [FPATH], # This task creates these files \u0026#39;actions\u0026#39;: [ f\u0026#39;echo \u0026#34;Ahoy there!\u0026#34; \u0026gt; {FPATH}\u0026#39;, ], } Execute it # udo Try to execute it again\u0026hellip; # And see that it won\u0026rsquo;t happen because the results were cached\nRemove the outputs # udo clean Use the output in other tasks # def TaskMessage(): return { \u0026#39;description\u0026#39;: \u0026#39;Prints the file\u0026#39;, \u0026#39;deps\u0026#39;: [FPATH], # This task depends on these files \u0026#39;capture\u0026#39;: 1, # Show stdout \u0026#39;actions\u0026#39;: [ f\u0026#39;cat {FPATH}\u0026#39;, ], } udo # Will execute them in order: Touch -\u0026gt; Message "},{"id":2,"href":"/udo/api/","title":"uDO API","section":"Introduction","content":" API # Task # Tasks are either dictionaries or functions that return a dictionary, with the following attributes.\nThey must follow the naming scheme of \u0026ldquo;TaskX\u0026rdquo; where \u0026ldquo;X\u0026rdquo; is the name of the task.\nclass Task: name : str # The name of the task, defaults to the constructor\u0026#39;s name description : str # Will be shown on the default \u0026#39;udo help\u0026#39; message deps : list[str | Task] # List of files, directories, or other task # constructors this task depends on outs : list[str] # List of files or directories this task creates clean : bool | callable = True # Should outs be removed on \u0026#39;udo clean\u0026#39; skipRun : bool | callable = False # Should the task be skipped capture = -1 | 0 | 1 # Capture stderr and stdout (-1), only stdout (0), # or nothing (1) actions : list[str | callable] # List of bash commands or python functions # to be executed subtasks : list[Task] # List of subtasks Example:\ndef TaskExample(): return { \u0026#39;description\u0026#39;: \u0026#39;This is the main task\u0026#39;, \u0026#39;deps\u0026#39;: [], # It doesn\u0026#39;t depend on anything \u0026#39;outs\u0026#39;: [\u0026#39;build\u0026#39;, \u0026#39;build/test\u0026#39;], \u0026#39;actions\u0026#39;: [ \u0026#39;mkdir -p build\u0026#39;, \u0026#39;echo \u0026#34;Ahoy there!\u0026#34; \u0026gt; build/test\u0026#39;, ], } deps # A list of files that have to exist or other tasks that should be executed before this task can be executed.\nExample:\n\u0026#39;deps\u0026#39;: [\u0026#39;build\u0026#39;, TaskExample], outs # A list of files that will be created by this task.\nThis is checked, so it will cause an error if any of these doesn\u0026rsquo;t exist after it\u0026rsquo;s execution.\nclean # If True, all files in outs will be deleted on udo clean.\nIf False, udo clean will skip this task. If it\u0026rsquo;s a function, then udo clean will execute it instead of deleting outs.\nskipRun # If True, this task won\u0026rsquo;t be executed.\nIf False, this task will be executed normally (see Execution).\nIf it\u0026rsquo;s a function, then instead of checking the cache this function will determine if the task is run by returning True or False.\nExecution # When you execute uDO, the program loads all the described tasks and then executes them in such an order that all dependencies are met.\nIt also caches the files described in each task\u0026rsquo;s deps and outs, so that tasks will be skipped if both:\nThe dependencies haven\u0026rsquo;t changed The outputs still exists The actions haven\u0026rsquo;t changed Config # Some of the arguments can be also saved in the udo.py file under a dictionary:\nUDOConfig = { \u0026#39;version\u0026#39;: (1, 4, 0), # Used to check compatibility \u0026#39;cache\u0026#39;: \u0026#39;./.udo.db\u0026#39;, \u0026#39;prefix\u0026#39;: \u0026#39;Task\u0026#39;, } WARNING: Don\u0026rsquo;t use this variable or it\u0026rsquo;s name for anything else.\n"}]